

calendar_channel_event_associations
calendar_channels
calendar_event_participants
calendar_events
registrations
rsvp_tracking

create table public.calendar_channel_event_associations (
  id uuid not null default gen_random_uuid (),
  calendar_channel_id uuid not null,
  calendar_event_id uuid not null,
  external_event_id text not null,
  event_external_id text not null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint calendar_channel_event_associations_pkey primary key (id),
  constraint calendar_channel_event_associ_calendar_channel_id_external__key unique (calendar_channel_id, external_event_id),
  constraint calendar_channel_event_associ_calendar_event_id_calendar_ch_key unique (calendar_event_id, calendar_channel_id),
  constraint calendar_channel_event_associations_calendar_channel_id_fkey foreign KEY (calendar_channel_id) references calendar_channels (id) on delete CASCADE,
  constraint calendar_channel_event_associations_calendar_event_id_fkey foreign KEY (calendar_event_id) references calendar_events (id) on delete CASCADE
) TABLESPACE pg_default;


create table public.calendar_event_participants (
  id uuid not null default gen_random_uuid (),
  calendar_event_id uuid not null,
  handle text not null,
  display_name text null default ''::text,
  is_organizer boolean null default false,
  response_status text null default 'NEEDS_ACTION'::text,
  responded_at timestamp with time zone null,
  user_id uuid null,
  contact_id uuid null,
  comment text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint calendar_event_participants_pkey primary key (id),
  constraint calendar_event_participants_calendar_event_id_handle_key unique (calendar_event_id, handle),
  constraint calendar_event_participants_calendar_event_id_fkey foreign KEY (calendar_event_id) references calendar_events (id) on delete CASCADE,
  constraint calendar_event_participants_contact_id_fkey foreign KEY (contact_id) references contacts (id),
  constraint calendar_event_participants_user_id_fkey foreign KEY (user_id) references users (id),
  constraint calendar_event_participants_response_status_check check (
    (
      response_status = any (
        array[
          'NEEDS_ACTION'::text,
          'ACCEPTED'::text,
          'DECLINED'::text,
          'TENTATIVE'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_calendar_participants_event on public.calendar_event_participants using btree (calendar_event_id) TABLESPACE pg_default;

create index IF not exists idx_calendar_participants_user on public.calendar_event_participants using btree (user_id) TABLESPACE pg_default
where
  (user_id is not null);

create index IF not exists idx_calendar_participants_contact on public.calendar_event_participants using btree (contact_id) TABLESPACE pg_default
where
  (contact_id is not null);

create trigger update_calendar_participants_updated_at BEFORE
update on calendar_event_participants for EACH row
execute FUNCTION update_updated_at_column ();


create table public.calendar_channels (
  id uuid not null default gen_random_uuid (),
  connected_account_id uuid not null,
  handle text not null,
  visibility text null default 'SHARE_EVERYTHING'::text,
  is_sync_enabled boolean null default true,
  sync_stage text null default 'FULL_CALENDAR_EVENT_LIST_FETCH_PENDING'::text,
  sync_status text null default 'ACTIVE'::text,
  sync_cursor text null default ''::text,
  is_contact_auto_creation_enabled boolean null default true,
  contact_auto_creation_policy text null default 'SENT_AND_RECEIVED'::text,
  throttle_failure_count integer null default 0,
  last_sync_history_event_received timestamp with time zone null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint calendar_channels_pkey primary key (id),
  constraint calendar_channels_connected_account_id_fkey foreign KEY (connected_account_id) references connected_accounts (id) on delete CASCADE,
  constraint calendar_channels_contact_auto_creation_policy_check check (
    (
      contact_auto_creation_policy = any (
        array[
          'SENT_AND_RECEIVED'::text,
          'SENT'::text,
          'RECEIVED'::text,
          'NONE'::text
        ]
      )
    )
  ),
  constraint calendar_channels_visibility_check check (
    (
      visibility = any (
        array[
          'SHARE_EVERYTHING'::text,
          'SHARE_AVAILABILITY'::text,
          'METADATA'::text,
          'PRIVATE'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_calendar_channels_account on public.calendar_channels using btree (connected_account_id) TABLESPACE pg_default;

create index IF not exists idx_calendar_channels_sync on public.calendar_channels using btree (sync_status, sync_stage) TABLESPACE pg_default;

create trigger update_calendar_channels_updated_at BEFORE
update on calendar_channels for EACH row
execute FUNCTION update_updated_at_column ();

create table public.registrations (
  id uuid not null default gen_random_uuid (),
  event_id uuid not null,
  ticket_type_id uuid not null,
  user_id uuid null,
  registration_number text not null default (
    'REG-'::text || lpad(
      (nextval('registration_sequence'::regclass))::text,
      8,
      '0'::text
    )
  ),
  qr_code text null,
  group_id uuid null,
  group_size integer null default 1,
  is_group_leader boolean null default false,
  email text not null,
  first_name text not null,
  last_name text not null,
  phone character varying(20) null,
  company_name text null,
  job_title text null,
  status text null default 'pending'::text,
  payment_status text null default 'pending'::text,
  ticket_price numeric(10, 2) not null default 0,
  discount_amount numeric(10, 2) null default 0,
  service_fee numeric(10, 2) null default 0,
  tax_amount numeric(10, 2) null default 0,
  total_amount numeric(10, 2) not null default 0,
  payment_id uuid null,
  promo_code_id uuid null,
  custom_fields jsonb null default '{}'::jsonb,
  dietary_restrictions text[] null,
  accessibility_needs text[] null,
  checked_in boolean null default false,
  checked_in_at timestamp with time zone null,
  checked_in_by uuid null,
  check_in_method text null,
  registration_source text null default 'website'::text,
  utm_source text null,
  utm_medium text null,
  utm_campaign text null,
  registered_at timestamp with time zone null default now(),
  confirmed_at timestamp with time zone null,
  cancelled_at timestamp with time zone null,
  ip_address inet null,
  user_agent text null,
  metadata jsonb null default '{}'::jsonb,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint registrations_pkey primary key (id),
  constraint unique_user_event unique (event_id, user_id),
  constraint registrations_qr_code_key unique (qr_code),
  constraint registrations_registration_number_key unique (registration_number),
  constraint registrations_ticket_type_id_fkey foreign KEY (ticket_type_id) references ticket_types (id),
  constraint registrations_event_id_fkey foreign KEY (event_id) references events (id) on delete CASCADE,
  constraint registrations_user_id_fkey foreign KEY (user_id) references users (id),
  constraint registrations_checked_in_by_fkey foreign KEY (checked_in_by) references users (id),
  constraint registrations_status_check check (
    (
      status = any (
        array[
          'pending'::text,
          'confirmed'::text,
          'waitlist'::text,
          'cancelled'::text,
          'no_show'::text
        ]
      )
    )
  ),
  constraint registrations_check_in_method_check check (
    (
      check_in_method = any (
        array['manual'::text, 'qr_code'::text, 'nfc'::text]
      )
    )
  ),
  constraint registrations_payment_status_check check (
    (
      payment_status = any (
        array[
          'pending'::text,
          'paid'::text,
          'refunded'::text,
          'comp'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_registrations_event on public.registrations using btree (event_id) TABLESPACE pg_default;

create index IF not exists idx_registrations_user on public.registrations using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_registrations_status on public.registrations using btree (status) TABLESPACE pg_default;

create index IF not exists idx_registrations_checkin on public.registrations using btree (checked_in) TABLESPACE pg_default;

create index IF not exists idx_registrations_number on public.registrations using btree (registration_number) TABLESPACE pg_default;

create index IF not exists idx_registrations_event_status on public.registrations using btree (event_id, status) TABLESPACE pg_default;

create index IF not exists idx_registrations_ticket_type_id on public.registrations using btree (ticket_type_id) TABLESPACE pg_default;

create index IF not exists idx_registrations_checked_in_by on public.registrations using btree (checked_in_by) TABLESPACE pg_default;

create index IF not exists idx_registrations_event_status_created on public.registrations using btree (event_id, status, created_at) TABLESPACE pg_default;

create trigger auto_process_waitlist
after
update on registrations for EACH row when (old.status <> new.status)
execute FUNCTION trigger_process_waitlist ();

create trigger update_registrations_updated_at BEFORE
update on registrations for EACH row
execute FUNCTION update_updated_at ();

create table public.rsvp_tracking (
  id uuid not null default gen_random_uuid (),
  event_id uuid null,
  attendee_id uuid null,
  rsvp_status character varying(50) null default 'Maybe'::character varying,
  guest_count integer null default 0,
  dietary_requirements text null,
  special_requests text null,
  rsvp_date timestamp with time zone null default now(),
  last_updated timestamp with time zone null default now(),
  response_source character varying(50) null default 'whatsapp'::character varying,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint rsvp_tracking_pkey primary key (id),
  constraint rsvp_tracking_event_id_attendee_id_key unique (event_id, attendee_id),
  constraint rsvp_tracking_event_id_fkey foreign KEY (event_id) references events (id) on delete CASCADE,
  constraint rsvp_tracking_attendee_id_fkey foreign KEY (attendee_id) references users (id) on delete CASCADE,
  constraint rsvp_tracking_guest_count_check check ((guest_count >= 0)),
  constraint rsvp_tracking_response_source_check check (
    (
      (response_source)::text = any (
        (
          array[
            'whatsapp'::character varying,
            'web'::character varying,
            'mobile'::character varying,
            'email'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint rsvp_tracking_rsvp_status_check check (
    (
      (rsvp_status)::text = any (
        (
          array[
            'Going'::character varying,
            'Going with guest'::character varying,
            'Maybe'::character varying,
            'Not Going'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_rsvp_tracking_event on public.rsvp_tracking using btree (event_id) TABLESPACE pg_default;

create index IF not exists idx_rsvp_tracking_attendee on public.rsvp_tracking using btree (attendee_id) TABLESPACE pg_default;

create index IF not exists idx_rsvp_tracking_status on public.rsvp_tracking using btree (rsvp_status) TABLESPACE pg_default;

create index IF not exists idx_rsvp_tracking_event_status on public.rsvp_tracking using btree (event_id, rsvp_status) TABLESPACE pg_default;

create trigger update_rsvp_tracking_updated_at BEFORE
update on rsvp_tracking for EACH row
execute FUNCTION update_updated_at ();






