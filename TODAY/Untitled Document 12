# üö® CRITICAL: Recovering 20+ Deleted Tables in Supabase

## üî¥ IMMEDIATE ACTIONS (Do These First!)

### 1. **Stop All Write Operations**
```bash
# Prevent further data loss
# Pause your application or put it in maintenance mode
```

### 2. **Check Supabase Dashboard Backups**

**Pro/Team Plans Have Automatic Backups:**
1. Go to **Supabase Dashboard** ‚Üí Your Project
2. Navigate to **Settings** ‚Üí **Backups**
3. Look for **Point-in-Time Recovery (PITR)**
4. Check available restore points (usually 7-30 days)

## üìã Complete Recovery Methods (Ranked by Effectiveness)

### Method 1: **Point-in-Time Recovery (PITR)** ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
*Available on Pro/Team plans only*

```sql
-- In Supabase Dashboard ‚Üí Settings ‚Üí Backups
-- Select a restore point before tables were deleted
-- Click "Restore to this point"
```

**Steps:**
1. Navigate to **Project Settings** ‚Üí **Backups**
2. Find restore point before deletion
3. Click **"Restore"**
4. Wait 5-30 minutes for restoration

### Method 2: **Database Backups/Snapshots** ‚≠ê‚≠ê‚≠ê‚≠ê
*Check if you have manual backups*

```bash
# If you have a backup file
psql -h db.YOUR_PROJECT.supabase.co -p 5432 -U postgres -d postgres < backup.sql

# Or restore via Supabase Dashboard
# Settings ‚Üí Database ‚Üí Backups ‚Üí Upload Backup
```

### Method 3: **Transaction Logs Recovery** ‚≠ê‚≠ê‚≠ê
*If deletion was recent (within WAL retention)*

```sql
-- Connect to your database
-- Check if tables still exist in transaction logs
SELECT schemaname, tablename, pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size
FROM pg_tables 
WHERE schemaname NOT IN ('pg_catalog', 'information_schema')
ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;

-- Check dropped objects in pg_event_trigger_dropped_objects()
-- (Only works if you had event triggers set up)
```

### Method 4: **Supabase CLI Recovery** ‚≠ê‚≠ê‚≠ê

```bash
# Install Supabase CLI
npm install -g supabase

# Login and link project
supabase login
supabase link --project-ref YOUR_PROJECT_REF

# List available backups
supabase db backup list

# Restore from backup
supabase db backup restore --backup-id BACKUP_ID
```

### Method 5: **Check Local Migration Files** ‚≠ê‚≠ê

```bash
# Check if you have local migrations
ls -la supabase/migrations/

# If migrations exist, recreate tables
supabase db reset
supabase db push
```

### Method 6: **PostgreSQL System Catalogs** ‚≠ê‚≠ê

```sql
-- Check if table definitions exist in system catalogs
SELECT 
    n.nspname as schema,
    c.relname as table,
    a.attname as column,
    t.typname as type
FROM 
    pg_class c
    JOIN pg_namespace n ON n.oid = c.relnamespace
    JOIN pg_attribute a ON a.attrelid = c.oid
    JOIN pg_type t ON t.oid = a.atttypid
WHERE 
    c.relkind = 'r'
    AND n.nspname NOT IN ('pg_catalog', 'information_schema')
    AND a.attnum > 0
    AND NOT a.attisdropped
ORDER BY 
    n.nspname, c.relname, a.attnum;
```

## üÜò Emergency Recovery Script

Create this script to check what's recoverable:

```javascript
// recovery-check.js
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY // Use service role for admin access
);

async function checkRecovery() {
  console.log('üîç Checking for recoverable data...\n');
  
  // Check existing tables
  const { data: tables, error } = await supabase.rpc('get_tables_list');
  
  if (!error && tables) {
    console.log('‚úÖ Existing tables found:', tables.length);
    tables.forEach(t => console.log(`  - ${t.table_name}`));
  }
  
  // Check for dropped tables in logs
  const { data: logs, error: logError } = await supabase
    .from('postgres_logs')
    .select('*')
    .like('message', '%DROP TABLE%')
    .order('timestamp', { ascending: false })
    .limit(50);
    
  if (!logError && logs) {
    console.log('\nüóëÔ∏è Recently dropped tables:');
    logs.forEach(log => console.log(`  - ${log.timestamp}: ${log.message}`));
  }
}

// Custom RPC function to list tables
const GET_TABLES_SQL = `
CREATE OR REPLACE FUNCTION get_tables_list()
RETURNS TABLE(table_name text, table_schema text)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  SELECT 
    tablename::text, 
    schemaname::text
  FROM pg_tables
  WHERE schemaname NOT IN ('pg_catalog', 'information_schema');
END;
$$;
`;

checkRecovery();
```

## üìû Contacting Supabase Support

### For Pro/Team Plans:
1. **Dashboard**: Click "Support" ‚Üí "New Ticket"
2. **Email**: support@supabase.io
3. **Discord**: Priority support channel

### Information to Provide:
```
Subject: URGENT: 20+ Tables Deleted - Need Recovery

Project ID: [Your Project ID]
Project Name: [Your Project Name]
Deletion Time: [Approximate time/date]
Tables Affected: [List if known]
Plan Type: [Free/Pro/Team]

Description:
- How deletion occurred
- List of critical tables needed
- Any error messages
- Recovery attempts made
```

## üõ†Ô∏è Rebuilding Tables (Last Resort)

If recovery isn't possible, here's how to rebuild:

### Step 1: Gather Table Schemas
Check these sources:
- Git history for migration files
- Local development database
- Application models/schemas
- Team documentation

### Step 2: Rebuild Script Template
```sql
-- Rebuild critical tables
CREATE TABLE IF NOT EXISTS users (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS events (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    date DATE NOT NULL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Add more tables...
```

## üîç Prevention for Future

### 1. **Enable Automatic Backups**
```sql
-- Upgrade to Pro plan for automatic daily backups
-- Or set up manual backup job
```

### 2. **Create Backup Script**
```bash
#!/bin/bash
# backup-supabase.sh
DATE=$(date +%Y%m%d_%H%M%S)
pg_dump -h db.YOUR_PROJECT.supabase.co -U postgres -d postgres > backup_$DATE.sql
```

### 3. **Version Control Migrations**
```bash
# Always commit migrations
git add supabase/migrations/
git commit -m "Database schema backup"
```

### 4. **Set Up Deletion Protection**
```sql
-- Create event trigger to prevent accidental drops
CREATE OR REPLACE FUNCTION prevent_drop()
RETURNS event_trigger
LANGUAGE plpgsql
AS $$
BEGIN
  RAISE EXCEPTION 'DROP operations are disabled. Use ALLOW_DROP=true to override.';
END;
$$;

CREATE EVENT TRIGGER no_drop_trigger
ON sql_drop
EXECUTE FUNCTION prevent_drop();
```

## üöÄ Immediate Next Steps

1. **Check Supabase Dashboard** for backups NOW
2. **Contact Support** if on paid plan
3. **Run recovery check script** above
4. **Document any remaining table structures** from memory/code

Time is critical - the sooner you act, the better chance of recovery. Supabase keeps WAL (Write-Ahead Logging) for a limited time, so act fast!

Would you like me to help you with any specific recovery method or create custom recovery scripts for your situation?
