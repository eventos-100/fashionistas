create sql files for each table create table public.accounts (

  id uuid not null default gen_random_uuid (),

  company_name character varying(255) not null,

  legal_name character varying(255) null,

  website character varying(255) null,

  account_type character varying(50) null,

  industry character varying(100) null,

  sub_industry character varying(100) null,

  company_size character varying(50) null,

  annual_revenue_range character varying(50) null,

  headquarters_address text null,

  headquarters_city character varying(100) null,

  headquarters_country character varying(100) null,

  operating_regions text[] null,

  account_status character varying(50) null default 'prospect'::character varying,

  account_tier character varying(20) null,

  health_score integer null default 50,

  total_revenue_generated numeric(12, 2) null default 0,

  outstanding_balance numeric(12, 2) null default 0,

  credit_limit numeric(12, 2) null,

  payment_terms character varying(50) null,

  account_owner_id uuid null,

  account_team uuid[] null,

  first_contact_date date null,

  became_customer_date date null,

  renewal_date date null,

  churn_date date null,

  tags text[] null,

  notes text null,

  created_at timestamp with time zone null default now(),

  updated_at timestamp with time zone null default now(),

  constraint accounts_pkey primary key (id),

  constraint accounts_account_owner_id_fkey foreign KEY (account_owner_id) references users (id)

) TABLESPACE pg_default; create table public.event_feedback (

  id bigint generated always as identity not null,

  event_id bigint null,

  registration_id bigint null,

  nps_rating integer not null,

  nps_category public.nps_category null,

  venue_rating integer null,

  content_rating integer null,

  organization_rating integer null,

  value_rating integer null,

  comment text null,

  suggestions text null,

  submitted_at timestamp with time zone null default now(),

  status public.feedback_status null default 'pending'::feedback_status,

  is_archived boolean null default false,

  archived_at timestamp with time zone null,

  constraint event_feedback_pkey primary key (id),

  constraint event_feedback_registration_id_fkey foreign KEY (registration_id) references registrations (id) on delete CASCADE,

  constraint event_feedback_event_id_fkey foreign KEY (event_id) references events (id) on delete CASCADE,

  constraint event_feedback_value_rating_check check (

    (

      (value_rating >= 1)

      and (value_rating <= 5)

    )

  ),

  constraint event_feedback_content_rating_check check (

    (

      (content_rating >= 1)

      and (content_rating <= 5)

    )

  ),

  constraint event_feedback_venue_rating_check check (

    (

      (venue_rating >= 1)

      and (venue_rating <= 5)

    )

  ),

  constraint event_feedback_nps_rating_check check (

    (

      (nps_rating >= 0)

      and (nps_rating <= 10)

    )

  ),

  constraint event_feedback_organization_rating_check check (

    (

      (organization_rating >= 1)

      and (organization_rating <= 5)

    )

  )

) TABLESPACE pg_default;

create index IF not exists idx_feedback_event_nps on public.event_feedback using btree (event_id, nps_category) TABLESPACE pg_default

where

  (not is_archived);

create index IF not exists idx_event_feedback_registration_id on public.event_feedback using btree (registration_id) TABLESPACE pg_default

where

  (registration_id is not null);

create index IF not exists idx_event_feedback_event_id on public.event_feedback using btree (event_id) TABLESPACE pg_default;

create index IF not exists idx_event_feedback_status on public.event_feedback using btree (status) TABLESPACE pg_default;

create trigger trg_update_nps_category BEFORE INSERT

or

update OF nps_rating on event_feedback for EACH row

execute FUNCTION update_nps_category (); create table public.event_models (

  id uuid not null default gen_random_uuid (),

  event_id bigint null,

  model_id uuid null,

  booking_status character varying(50) null default 'invited'::character varying,

  model_role character varying(50) null,

  outfit_count integer null default 1,

  call_time timestamp with time zone null,

  rehearsal_time timestamp with time zone null,

  show_time timestamp with time zone null,

  wrap_time timestamp with time zone null,

  rate_type character varying(20) null,

  rate_amount numeric(12, 2) null,

  total_compensation numeric(12, 2) null,

  payment_status character varying(20) null default 'pending'::character varying,

  measurements_confirmed boolean null default false,

  fitting_completed boolean null default false,

  special_requirements text null,

  created_at timestamp with time zone null default now(),

  updated_at timestamp with time zone null default now(),

  constraint event_models_pkey primary key (id),

  constraint event_models_event_id_fkey foreign KEY (event_id) references events (id) on delete CASCADE,

  constraint event_models_model_id_fkey foreign KEY (model_id) references model_profiles (id) on delete CASCADE

) TABLESPACE pg_default; 
