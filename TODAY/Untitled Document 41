create table public.events (
  id uuid not null default gen_random_uuid (),
  organization_id uuid not null,
  organizer_user_id uuid not null,
  name text not null,
  slug text not null,
  description text null,
  event_type text null default 'other'::text,
  format text null default 'in-person'::text,
  status text null default 'draft'::text,
  visibility text null default 'public'::text,
  start_date timestamp with time zone not null,
  end_date timestamp with time zone not null,
  timezone text null default 'America/Bogota'::text,
  venue_id uuid null,
  capacity integer not null,
  registered_count integer null default 0,
  ticket_revenue numeric(12, 2) null default 0,
  metadata jsonb null default '{}'::jsonb,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  is_deleted boolean null default false,
  deleted_at timestamp with time zone null,
  deleted_by uuid null,
  allow_waitlist boolean null default true,
  max_waitlist_size integer null,
  constraint events_pkey primary key (id),
  constraint events_slug_key unique (slug),
  constraint events_org_slug_unique unique (organization_id, slug),
  constraint events_venue_id_fkey foreign KEY (venue_id) references venues (id),
  constraint events_organizer_user_id_fkey foreign KEY (organizer_user_id) references users (id),
  constraint events_organization_id_fkey foreign KEY (organization_id) references organizations (id) on delete CASCADE,
  constraint events_deleted_by_fkey foreign KEY (deleted_by) references users (id)
) TABLESPACE pg_default;

create index IF not exists idx_events_organization on public.events using btree (organization_id) TABLESPACE pg_default;

create index IF not exists idx_events_venue on public.events using btree (venue_id) TABLESPACE pg_default;

create index IF not exists idx_events_org_dates on public.events using btree (organization_id, start_date, end_date) TABLESPACE pg_default;

create index IF not exists idx_events_status on public.events using btree (status) TABLESPACE pg_default;

create index IF not exists idx_events_not_deleted on public.events using btree (organization_id) TABLESPACE pg_default
where
  (is_deleted = false);

create index IF not exists idx_events_organizer_user_id on public.events using btree (organizer_user_id) TABLESPACE pg_default;

create index IF not exists idx_events_org_status_date on public.events using btree (organization_id, status, start_date) TABLESPACE pg_default;

create trigger update_events_updated_at BEFORE
update on events for EACH row
execute FUNCTION update_updated_at ();
